// Code generated by mockery v2.49.1. DO NOT EDIT.

package mocks

import (
	types "github.com/k8snetworkplumbingwg/sriov-network-device-plugin/pkg/types"
	mock "github.com/stretchr/testify/mock"
)

// CDI is an autogenerated mock type for the CDI type
type CDI struct {
	mock.Mock
}

// CleanupSpecs provides a mock function with given fields:
func (_m *CDI) CleanupSpecs() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CleanupSpecs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateCDISpecForPool provides a mock function with given fields: resourcePrefix, rPool
func (_m *CDI) CreateCDISpecForPool(resourcePrefix string, rPool types.ResourcePool) error {
	ret := _m.Called(resourcePrefix, rPool)

	if len(ret) == 0 {
		panic("no return value specified for CreateCDISpecForPool")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, types.ResourcePool) error); ok {
		r0 = rf(resourcePrefix, rPool)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateContainerAnnotations provides a mock function with given fields: devicesIDs, resourcePrefix, resourceKind
func (_m *CDI) CreateContainerAnnotations(devicesIDs []string, resourcePrefix string, resourceKind string) (map[string]string, error) {
	ret := _m.Called(devicesIDs, resourcePrefix, resourceKind)

	if len(ret) == 0 {
		panic("no return value specified for CreateContainerAnnotations")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func([]string, string, string) (map[string]string, error)); ok {
		return rf(devicesIDs, resourcePrefix, resourceKind)
	}
	if rf, ok := ret.Get(0).(func([]string, string, string) map[string]string); ok {
		r0 = rf(devicesIDs, resourcePrefix, resourceKind)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func([]string, string, string) error); ok {
		r1 = rf(devicesIDs, resourcePrefix, resourceKind)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCDI creates a new instance of CDI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCDI(t interface {
	mock.TestingT
	Cleanup(func())
}) *CDI {
	mock := &CDI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
