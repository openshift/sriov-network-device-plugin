// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	v1beta1 "k8s.io/kubelet/pkg/apis/deviceplugin/v1beta1"
)

// RdmaSpec is an autogenerated mock type for the RdmaSpec type
type RdmaSpec struct {
	mock.Mock
}

// GetRdmaDeviceName provides a mock function with no fields
func (_m *RdmaSpec) GetRdmaDeviceName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRdmaDeviceName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetRdmaDeviceSpec provides a mock function with no fields
func (_m *RdmaSpec) GetRdmaDeviceSpec() []*v1beta1.DeviceSpec {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRdmaDeviceSpec")
	}

	var r0 []*v1beta1.DeviceSpec
	if rf, ok := ret.Get(0).(func() []*v1beta1.DeviceSpec); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v1beta1.DeviceSpec)
		}
	}

	return r0
}

// IsRdma provides a mock function with no fields
func (_m *RdmaSpec) IsRdma() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsRdma")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewRdmaSpec creates a new instance of RdmaSpec. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRdmaSpec(t interface {
	mock.TestingT
	Cleanup(func())
}) *RdmaSpec {
	mock := &RdmaSpec{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
