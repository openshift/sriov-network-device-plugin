// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	pci "github.com/jaypipes/ghw/pkg/pci"
	mock "github.com/stretchr/testify/mock"

	types "github.com/k8snetworkplumbingwg/sriov-network-device-plugin/pkg/types"
)

// DeviceProvider is an autogenerated mock type for the DeviceProvider type
type DeviceProvider struct {
	mock.Mock
}

// AddTargetDevices provides a mock function with given fields: _a0, _a1
func (_m *DeviceProvider) AddTargetDevices(_a0 []*pci.Device, _a1 int) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AddTargetDevices")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]*pci.Device, int) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDevices provides a mock function with given fields: _a0, _a1
func (_m *DeviceProvider) GetDevices(_a0 *types.ResourceConfig, _a1 int) []types.HostDevice {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetDevices")
	}

	var r0 []types.HostDevice
	if rf, ok := ret.Get(0).(func(*types.ResourceConfig, int) []types.HostDevice); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.HostDevice)
		}
	}

	return r0
}

// GetDiscoveredDevices provides a mock function with no fields
func (_m *DeviceProvider) GetDiscoveredDevices() []*pci.Device {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDiscoveredDevices")
	}

	var r0 []*pci.Device
	if rf, ok := ret.Get(0).(func() []*pci.Device); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pci.Device)
		}
	}

	return r0
}

// GetFilteredDevices provides a mock function with given fields: _a0, _a1, _a2
func (_m *DeviceProvider) GetFilteredDevices(_a0 []types.HostDevice, _a1 *types.ResourceConfig, _a2 int) ([]types.HostDevice, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for GetFilteredDevices")
	}

	var r0 []types.HostDevice
	var r1 error
	if rf, ok := ret.Get(0).(func([]types.HostDevice, *types.ResourceConfig, int) ([]types.HostDevice, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func([]types.HostDevice, *types.ResourceConfig, int) []types.HostDevice); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.HostDevice)
		}
	}

	if rf, ok := ret.Get(1).(func([]types.HostDevice, *types.ResourceConfig, int) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidConfig provides a mock function with given fields: _a0
func (_m *DeviceProvider) ValidConfig(_a0 *types.ResourceConfig) bool {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ValidConfig")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*types.ResourceConfig) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewDeviceProvider creates a new instance of DeviceProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDeviceProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *DeviceProvider {
	mock := &DeviceProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
